vector<int> preorderTraversal(TreeNode* root) {
        // iterative approch
        if(!root) return {};

        stack<TreeNode*>st;
        vector<int>sans;

        st.push(root);
        while(!st.empty()){
            TreeNode* curr = st.top();
            st.pop();

            sans.push_back(curr->val);

            if(curr->right) st.push(curr->right);
            if(curr->left) st.push(curr->left);

        }
        return sans;
    }

vector<int> inorderTraversal(TreeNode* root) {
        if(!root) return {};
        
        stack<TreeNode*>st;
        vector<int>sans;

        st.push(root);
        while(!st.empty()){
            TreeNode* curr = st.top();
            st.pop();

            if(!curr->left && !curr->right){
                sans.push_back(curr->val);
                continue;
            }
            
            if(curr->right){
                st.push(curr->right);
                curr->right = NULL;
            }
            st.push(curr);
            if(curr->left){
                st.push(curr->left);
                curr->left = NULL;
            }
        }
        return sans;
    }

